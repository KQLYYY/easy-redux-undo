"use strict";function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}var diff=require("deep-diff").diff,UNDO="@@UNDO",REDO="@@REDO",undoable=function(a){return function(){var b=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{},c=1<arguments.length?arguments[1]:void 0,d=b.past,e=b.present,f=b.future,g={past:[],present:a(void 0,{}),future:[]};switch(c.type){case UNDO:{var h=d[d.length-1],i=d.slice(0,d.length-1);return diff.revertChange(e,!0,h),{past:i,present:e,future:[h].concat(_toConsumableArray(f))}}case REDO:{var j=f[0],k=f.slice(1);return diff.applyChange(e,!0,j),{past:[].concat(_toConsumableArray(d),[j]),present:e,future:k}}default:{var n=a(e,c);if(n===b)return b;var l,m=d;return"object"===_typeof(n)&&(l=diff(e,n),m=[].concat(_toConsumableArray(d),[l])),{past:m,present:n,future:[]}}}}};